#version 330
 
uniform mat4 viewMatrix, projMatrix;
 
in vec4 position;
in vec4 color;
in vec3 normal;
 
out vec4 Color;

varying vec3 v_Vector;
uniform vec4 ambMat;
uniform vec4 diffMat;
uniform vec4 specularMat;
uniform float specularPow;

//This is just an example.  Don't do this!  It forces the GPU to recalculate the matrix for each vertex.
//Better to do it once in the CPU.
mat4 rotationMatrix(vec4 axis, float angle)
{
    axis = normalize(axis);
    float s = sin(angle);
    float c = cos(angle);
    float oc = 1.0 - c;
    
    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,
                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,
                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,
                0.0,                                0.0,                                0.0,                                1.0);
}

//This is just an example.  Don't do this!  It forces the GPU to recalculate the matrix for each vertex.
//Better to do it once in the CPU.
mat4 translationMatrix(vec3 pos)
{
    return mat4(1.0, 0.0, 0.0,  0.0,
                0.0, 1.0, 0.0 ,  0.0,
                0.0, 0.0, 1.0, 0.0,
                pos.x, pos.y, pos.z, 1.0);
}

void main()
{
	vec4 axis = vec4(2.0,0.0,0.0,0.0);
	vec3 pos = vec3(0.0,0.0,0.0);
    Color = color;
	// Matrix multiplication is not commutative, i.e. the order of operations matters. 
	// The transformations on a vertex' position, in order are:
	// model
	// view
	// projection


    gl_Position = projMatrix * viewMatrix * position ;
}