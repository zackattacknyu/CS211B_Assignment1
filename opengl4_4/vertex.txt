#version 330
 
uniform mat4 viewMatrix, projMatrix;
uniform mat4 currentViewMatrix;
uniform sampler2D zrdTextureSampler;
uniform vec2 mouseCoordinates;
in vec4 position;
in vec4 color;
in vec3 normal;

uniform int lightMode;

uniform vec3 lightCoordinates;

// Texture stuff
//layout(location = 1) in vec2 vertexUV;
in vec2 vertexUV;
out vec2 UV;
 
out vec4 Color;
out vec4 Position;
out vec3 Normal;
out vec3 LightCoordinates;

varying vec3 v_Vector;
uniform vec4 ambMat;
uniform vec4 diffMat;
uniform vec4 specularMat;
uniform float specularPow;

//This is just an example.  Don't do this!  It forces the GPU to recalculate the matrix for each vertex.
//Better to do it once in the CPU.
mat4 rotationMatrix(vec4 axis, float angle)
{
    axis = normalize(axis);
    float s = sin(angle);
    float c = cos(angle);
    float oc = 1.0 - c;
    
    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,
                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,
                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,
                0.0,                                0.0,                                0.0,                                1.0);
}

//This is just an example.  Don't do this!  It forces the GPU to recalculate the matrix for each vertex.
//Better to do it once in the CPU.
mat4 translationMatrix(vec3 pos)
{
    return mat4(1.0, 0.0, 0.0,  0.0,
                0.0, 1.0, 0.0 ,  0.0,
                0.0, 0.0, 1.0, 0.0,
                pos.x, pos.y, pos.z, 1.0);
}

void main()
{
	vec4 axis = vec4(2.0,0.0,0.0,0.0);
	vec3 pos = vec3(0.0,0.0,0.0);
    Color = color;

	// Matrix multiplication is not commutative, i.e. the order of operations matters. 
	// The transformations on a vertex' position, in order are:
	// model
	// view
	// projection

	mat4 normalMatrix = transpose(inverse(viewMatrix));
	vec4 tempVector = normalMatrix * vec4(normal.x, normal.y, normal.z,0);
	Normal = vec3(tempVector[0],tempVector[1],tempVector[2]);
    //Normal = normal;
	gl_Position = projMatrix * viewMatrix * position ;

	vec4 tempLightCoords = vec4(lightCoordinates.xyz,1.0);


	if(lightMode == 0){
		//light should stay stationary
		Position = projMatrix*viewMatrix*position;
	}else if(lightMode == 1){
		Position = viewMatrix*position;
	}else if(lightMode == 2){
		Position = currentViewMatrix*position;
	}else if(lightMode == 3){
		//light stays stationary when object moves
		Position = viewMatrix* position;
		tempLightCoords = viewMatrix*tempLightCoords;
	}

	if(lightMode == 0){

		//light coordinates are static
		//good one. light stays stationary 

	}else if(lightMode == 1){
		
		//light coordinates multiplied by view matrix
		//tempLightCoords = currentViewMatrix*tempLightCoords;
		//tempLightCoords = projMatrix*tempLightCoords;
	
	}else if(lightMode == 2){
		
		//light coordinates multiplied by model-view matrix
		//tempLightCoords = viewMatrix*tempLightCoords;
	
	}else if(lightMode == 3){

		//good one. Light will follow the object
		//tempLightCoords = projMatrix * viewMatrix * tempLightCoords;
	}
	LightCoordinates = vec3(tempLightCoords[0],tempLightCoords[1],tempLightCoords[2]);
	UV = vertexUV;

}